@page "/component"
@using Azure
@using Azure.AI.OpenAI
@using OpenAI_API
@using System.Net.Http
@using System.Text.Json
@using System.Text
@rendermode InteractiveServer

<div class="component">
    <h3>Speak to AI</h3>
    <InputTextArea class="post input" type="text" @bind-Value="@userInput" />
    <div class="options">
        <button class="btn btn-primary" @onclick="AIResponseTest">Post</button>
        <button class="btn" @onclick="ClosePanel">Close</button>
    </div>
    <h4>AI Response: </h4>
    <p>@aiResponse</p>
</div>


@code {
    private string userInput = "";
    private string aiResponse = "";

    [Parameter] public EventCallback onClose { get; set; }

    private async Task ClosePanel()
    {
        await onClose.InvokeAsync();
    }
    

    private async Task AIResponseTest()
    {
        var client = new HttpClient();
        string systemContent = File.ReadAllText("resources/input.txt");
        // Create the JSON object for the request body
        var requestBody = new
        {
            messages = new[]
            {
        new { role = "system", content = systemContent },
        new { role = "user", content = userInput }
    },
            temperature = 0.4,
            max_tokens = 1,
            stream = false
        };
        // Serialize the object to JSON
        var requestContent = new StringContent(JsonSerializer.Serialize(requestBody), Encoding.UTF8, "application/json");
        // Send the POST request to the Copilot endpoint
        HttpResponseMessage response = await client.PostAsync("http://localhost:1234/v1/chat/completions", requestContent);
        // Get the response content
        HttpContent responseContent = response.Content;
        string responseBody = await responseContent.ReadAsStringAsync();
        // Deserialize the response content to a JSON object
        var responseObject = JsonSerializer.Deserialize<JsonElement>(responseBody);
        // Extract the "content" value from the response
        string aiResponseContent = responseObject.GetProperty("choices")[0].GetProperty("message").GetProperty("content").GetString();
        // Assign the response content to the aiResponse variable
        aiResponse = aiResponseContent;

        Console.WriteLine(aiResponseContent != " TRUE");
        Console.WriteLine(aiResponseContent != " TRUE.");

        if (aiResponseContent != " TRUE" && aiResponseContent != " TRUE.")
        {
            saveInput();
        }
        ClosePanel();

    }

    private void saveInput()
    {
        
            string fileName = GenerateRandomFileName();
            string filePath = Path.Combine("posts", fileName);
            string jsonContent = JsonSerializer.Serialize(new { userInput });
            File.WriteAllText(filePath, jsonContent);
        
    }

    public static string GenerateRandomString(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        var random = new Random();
        var randomString = new StringBuilder(length);

        for (int i = 0; i < length; i++)
        {
            randomString.Append(chars[random.Next(chars.Length)]);
        }

        return randomString.ToString();
    }

    private string GenerateRandomFileName()
    {


        Random random = new Random();
        int randomNumber = random.Next(1, 7);
        string fileName;
        do
        {
            fileName = GenerateRandomString(randomNumber) + ".json";
        } while (File.Exists(fileName) || !fileName.EndsWith(".json"));
        return fileName;
    }
}
