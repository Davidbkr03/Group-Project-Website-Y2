@page "/"
@rendermode InteractiveServer

<div class="main-page-wrapper">
    
    <div class="main-content">
        <div class="main-page @backgroundblur">
            <h1 class="none-post">Home Feed</h1>
            <button class="btn-primary" @onclick="TogglePanel">Make post</button>
            @foreach (var post in posts)
            {
                <Post Content="@post.Content" />
            }
        </div>
        <div class="component-container @_componentContainerClass">
            @if (_showPanel)
            {
                <Component onClose="TogglePanelAndLoadPosts" />
            }
        </div>
    </div>

    <div class="sidebar post">
        <h3>Filter Content</h3>
        <ul>
            <li><button class="btn-secondary" > <span class="text"> All</span> </button></li>
            <li><button class="btn-secondary" role="button"> <span class="text"> News</span> </button></li>
            <li><button class="btn-secondary" role="button"> <span class="text"> Sports</span> </button></li>
            <li><button class="btn-secondary" role="button"> <span class="text"> Technology</span> </button></li>
        </ul>
    </div>

    
</div>

@code {
    private bool _showPanel = false;
    List<Post> posts = new List<Post>();
    String postContent = "";
    private bool _isComponentExiting = false; // New state
    private string backgroundblur = ""; // New state
    private string _componentContainerClass = ""; // Initially no class

    protected override async Task OnInitializedAsync()
    {
        await LoadPostsAsync();
    }

    private async Task LoadPostsAsync()
    {
        var postFiles = Directory.GetFiles("posts", "*.json");
        posts.Clear(); // Wipe the posts list before adding new values
        foreach (var file in postFiles)
        {
            String postContent = await File.ReadAllTextAsync(file);
            var post = new Post { Content = postContent }; // Set the Content property of the Post object
            posts.Add(post);
            Console.WriteLine("Testing:" + postContent);
        }
    }

    

    private async Task TogglePanelAndLoadPosts()
    {
        TogglePanel();
        await LoadPostsAsync();
    }

    private async void TogglePanel()
    {
        if (_showPanel) // Handle closing the panel
        {
            _isComponentExiting = true;
            _componentContainerClass = ""; // Remove 'show' class immediately for fade-out
            backgroundblur = "";
            await Task.Delay(300); // Wait for fade-out
            _showPanel = false; // Now actually hide the panel
            _isComponentExiting = false;
        }
        else // Handle opening the panel
        {
            _showPanel = true;
            _componentContainerClass = "show"; // Add 'show' class for immediate visibility
            backgroundblur = "main-page-blurred";
        }
        //await LoadPostsAsync();
    }
}
